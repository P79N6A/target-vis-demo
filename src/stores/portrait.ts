import { Module, GetterTree, ActionTree, MutationTree } from 'vuex';
import { RootState } from '@/store';
import CommonService from '@/api/common.service';
import { TargetingInfo } from '@/models/targeting';
import { getInitTargetingIds } from '@/utils';
import { PortraitOp } from '@/models';



let service = CommonService.getInstance();

export interface PortraitState {
    loaded: boolean;
    opLogs: PortraitOp[];
    opPointer: string;
}

const state: PortraitState = {
    loaded: false,
    opLogs: [],
    opPointer: ""
};

const namespaced: boolean = true;

const getters: GetterTree<PortraitState, RootState> = {
    loaded(store) { return store.loaded },
    opLogs(store) { return store.opLogs },
    opPointer(store) { return store.opPointer }
}

const actions: ActionTree<PortraitState, RootState> = {
    async createState({ commit, rootGetters }, payload: string) {
        commit('loadedMutation', false);
        commit("opPointerMutation", "");
        let ids: TargetingInfo[] = [];
        ids = getInitTargetingIds(rootGetters['template/template']);
        let result: any = await service.getPortrait(
            Object.assign({ ids: ids.map(item => item.id), condition: payload }))
            .then(res => res.data);
        let tmp = rootGetters['types/types']['siteSet'];
        result.forEach((item: any) => {
            let result = tmp.find((s: any) => s.value == item[payload]);
            if (result != null) {
                item.name = result.label;
            }
        });
        result = result.filter((item: any) => item.name != null);
        commit('opLogsMutation', Object.assign({
            data: result,
            detailedData: null,
            activeId: null,
            filteredIds: null,
            condition: payload,
            mode: 'Global',
            index: 'target-freq',
            ids: ids,
            type: 'Init',
            key: 'Init'
        }));
        commit('loadedMutation', true);
    },
    async changeState({ commit, rootGetters }, payload: any) {
        let condition = payload.condition;
        let ids: TargetingInfo[] = payload.ids;
        let adgroupids = payload.adgroupids;
        if (adgroupids == null)
            adgroupids = "'84013361','83508403','83508403','83508403','84927994','81498582','84880390','84171361','84067417','85273943','84940175','85004379','85381518','85485641','85181771','85289813','82375787','84637264','84760191','84930651','84419259','81584073','81584073','85015250','85427046','83864233','85147887','84923832','79213889','82391109','80159751','83634403','84745370','83023596','72797116','85391710','85187247','85187247','85194687','84635543','85194232','84118153','85145863','85129437','82829969','81917731','81784564','84246403','77972940','84158255','85376539','82895219','85515877','85450884','85144405','84787861','85143864','85299228','85442686','84558870','83071518','84789073','84789075','76707015','76706956','84076966','85292056','82821598','84677054','84944070','83815853','83506948','84857752','85463317','84566165','85298906','85312846','85317926','84467219','85312846','81500213','83881949','83881949','82500080','82858828','85040642','85257092','85150943','85203475','84147081','84147081','85048084','84831569','84290376','83962512','85451438','83999238','84449444','84449444','85136612','83874209','82674965','83738949','85215166','82693404','84497877','82789664','85146985','83473562','83856768','82492509','84755186','84109557','85287890','83014030','79173571','82072455','85027330','85169125','82097183','84500486','85193993','85008109','85043313','83049261','82133184','81669737','84627158','84628620','71449719','85144892','83520925','85181359','85225826','84989472','82933465','83050516','80166647','84903772','81170117','85226810','85226473','84841461','83367193','84554579','85429139','85393774','83408651','85056963','83381441','83767603','84232195','83499321','78382707','83936082','83600536','84918903','82797168','84816042','84816042','84816042','79340106','85302500','69825136','69300195','83939056','84928899','84638345','84721172','85110392','84996135','85439287','85140582','85312666','84676252','84631618','74141208','84235964','84954468','84954468','84954468','84090048','82186736','84090048','84762546','84544640','84126106','84594590','84594590','84594590','85322053','85336779','85301891','85301891','85301891','85308170','84656729','84653226','84656729','84656729','85295758','82045106','85074485','85299802','85299802','85074485','78121117','82545901','82545901','83313680','83313680','85185863','85185863','83942131','84213706','84529750','84529750','84307634','84947370','85109868','85372950','83559263','80221075','84868264','85318025','77246701','85131806','85040684','84773378','81980861','85137435','85137435','85137435','73999936','73999936','73999936','84041591','84663232','79516052','81519761','84991911','74912149','78336024','78336024','78336024','82360619','83549194','83549194','83549194','68785424','84003605','83983720','82789665','83983720','84884592','72455166','83334095','85273068','81788248','80851016','81788248','85334441','82084614','84851783','85264247','85042186','85042186','85042186','85336041','85151396','85151396','84035029','85436005','85137384','85137384','85333551','79155100','79155100','79155100','85335767','85113825','85369212','85421376','85348561','83727218','84849394','82964065','72719037','81352182','82054701','84349284','82050335','84349284','83666507','84901601','83316378','84593949','85105784','85105784','83949088','85046173','73708780','80040293','85419107','84985269','85390937','85246373','85246373','83460594','84915465','85225604','83638576','83638576','83638576','85160318','85158878','85342415','82383081','84371690','84371690','79770765','85009605','85009605','84831680','85323301','84857005','84942031','84878971','84472401','85011542','77400825','79529756','76389584','84628139','84628139','85398973','84628139','85031235','78319860','84757390','78368107','84402568','84377769','84377769','84377769','84078132','84836872','85485315','85485315','85485315','85334599','84615750','84108868','84158192','84615750','85310172','84505763','85459240','84505763','84505763','85418672','82504000','84885941','80766144','84962523','82579383','84712087','82336934','85432948','82835196','82336934','85188375','85184776','85476143','84419456','84231370','75559465','64483512','85324272','83832558','76260162','81708382','77721584','84842915','76653667','83757174','83750808','84968400','85479033','84209036','51976585','84084076','84989587','85323246','85402595','83494699','81574464','85182935','85072484','84092637','84311616','85241661','85331256','83923989','83923989','84289287','83783915','83783915','85473597','84513286','82433153','85069170','85068754','85154280','85201073','85201122','84777895','85201657','85217639','84791220','85389988','82490321','67850867','83303571','85145865','85305172','84817077','84828563','85335175','85307362','85307362','83073512','83073512','82735344','85174374','85018529','85031667','85430669','85084699','85009784','83068449','84956957','85228752','83416791','83416791','85412248','83898477','83625410','85269529','85327470','85109582','85071585','85071585','85071585','84749328','85246853','85246853','84756322','84756322','84940492','85385251','71128610','80136543','72689246','84402626','84224797','85377391','85290846','85101971','23815102','59438414','85291497','77221556','84777119','84777203','80251856','85188612','79518827','84939048','83672923','83672923','85108368','85108368','85108368','83939675','85272534','85215189','78164140','83273677','80067827','84291662','85316726','85421929','84442890','84442890','84442890','84284204','84447793','83508285','83508285','83975662','85302316','84507899','85427807','84381539','81022550','83535050','72989807','85231375','78363093','84793699','56218549','79513764','85210223','83770993','83770993','83221976','77853799','77093974','85112645','85112645','84349480','84349480','84349480','85305585','85117102','84865328','84865328','84866150','84982481','76800450','80463002','80463002','80463002','85318557','85109266','81956341','85384632','68796505','84770927','75189382','83756325','82778083','82929923','81661164','81661164','85432847','84897650','84310867','82429814','82429814','84992815','83683190','83683190','83553830','84787615','84920212','85209483','83087836','82469619','85016136','85270749','85323237','69429104','80944682','83064326','83240902','85298291','84994132','84994132','85113032','85113032','85113032','85318738','85307494','85307494','79754667','84625822','84625822','85267400','85267400','85267400','84995406','84852822','84027042','77833001','77833001','83826578','84827958','84827958','84640550','84640550','81585931','81585931','85456063','84005071','85348055','82377069','77335089','77335089','84024518','84024518','85029784','85275239','82953275','83288591','73177664','73177664','84992072','84992072','85384190','83501815','85031860','83358690','84459646','85471754','84584539','84584539','85249468','84965748','84687424','84922857','84292773','84292773','84566819','84566819','84911556','84911556','84500430','83876176','85289069','84623541','85484886','85428985','85318056','84029260','84939125','85397529','84349687','80528658','84415752','83730582','85401888','83369170','83160949','73120869','76265676','85418553','82323198','85406753','84794812','82854629','82841034','84656930'";
        commit('loadedMutation', false);
        let result: any = await service.getPortrait(Object.assign({ ids: ids.map(item => item.id), adgroupids, condition: condition }))
            .then(res => res.data);
        let tmp = "";
        if (condition === "site_set") tmp = "siteSet";
        if (condition === "industry_id") tmp = "industry";
        if (condition === "product_type") tmp = "prodType";
        if (condition === "ad_platform_type") tmp = "platform";
        let process = rootGetters['types/types'][tmp];
        result.forEach((item: any) => {
            let result = process.find((a: any) => a.value == item[condition]);
            if (result != null) item.name = result.label;
            else item.name = "Unknown"
        });
        commit('changeStateMutation', result);
        commit('loadedMutation', true);
    },
    async addState({ commit, rootGetters, getters }, payload: any) {
        let ids: TargetingInfo[] = payload.ids;
        commit('loadedMutation', false);
        let result: any = await service.getPortrait(Object.assign({ ids: ids.map(item => item.id), adgroupids: "", condition: "site_set" }))
            .then(res => res.data);
        let siteSet = rootGetters['types/types']['siteSet'];
        result.forEach((item: any) => {
            let result = siteSet.find((s: any) => s.value == item['site_set']);
            if (result != null) item.name = result.label;
        });
        commit('clearOpLogsMutation', getters['opPointer']);
        commit('opLogsMutation', Object.assign({
            detailedData: null,
            data: result,
            index: 'target-freq',
            mode: 'Global',
            filteredIds: null,
            activeId: null,
            condition: "site_set",
            ids: ids, type: 'Drilldown', key: 'Drilldown-' + payload.clicked.name,
        }))
        commit('loadedMutation', true);
    },

};

const mutations: MutationTree<PortraitState> = {
    loadedMutation(store, payload: boolean) { store.loaded = payload },
    opPointerMutation(store, payload: string) { store.opPointer = payload },
    saveStateMutation(store, payload: PortraitOp) {
        let index = store.opLogs.findIndex(op => op.key === payload.key);
        store.opLogs.splice(index, 1, payload);
    },
    changeTypeMutation(store, payload: any) {
        let currentOpIndex = store.opLogs.findIndex(op => op.key === store.opPointer);
        store.opLogs[currentOpIndex].data = payload;
    },
    changeStateMutation(store, payload: any) {
        let currentOpIndex = store.opLogs.findIndex(op => op.key === store.opPointer);
        store.opLogs[currentOpIndex].detailedData = payload;
        store.opLogs[currentOpIndex].mode = 'Detail';
        store.opLogs[currentOpIndex].index = 'freq';
    },
    clearOpLogsMutation(store, payload: string) {
        let index = store.opLogs.findIndex(op => op.key === payload);
        store.opLogs.splice(index + 1, store.opLogs.length - index - 1);
    },
    opLogsMutation(store, payload: PortraitOp) {
        if (payload.key === 'Init') store.opLogs = [];
        store.opLogs.push(payload);
        store.opPointer = payload.key;
    }
};

export const portrait: Module<PortraitState, RootState> = {
    namespaced,
    getters,
    mutations,
    actions,
    state
}